// schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  name             String
  email            String   @unique
  emailVerified    Boolean  @default(false)
  image            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  twoFactorEnabled Boolean  @default(false)

  sessions Session[]
  accounts Account[]
  Post     Post[]
  Comment  Comment[]
  Image    Image[]
  Profile  Profile[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model Post {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String
  order     Int      @default(10)
  excerpt   String?
  content   String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String

  comments   Comment[]
  images     Image[]
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories Category[] @relation("PostCategories")
  tags       Tag[]      @relation("PostTags")

  @@map("post")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  order     Int      @default(10)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  authorId  String
  parentId  String?

  author  User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("CommentReplies")
  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  images  Image[]

  @@map("comment")
}

model Image {
  id        String   @id @default(cuid())
  url       String
  order     Int      @default(10)
  alt       String?
  createdAt DateTime @default(now())
  postId    String?
  userId    String?
  commentId String?

  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("image")
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  order Int    @default(10)
  slug  String @unique

  posts Post[] @relation("PostCategories")
  tags  Tag[]  @relation("CategoryTags")

  @@map("category")
}

model Tag {
  id         String @id @default(cuid())
  name       String @unique
  order      Int    @default(10)
  slug       String @unique
  categoryId String

  category Category @relation("CategoryTags", fields: [categoryId], references: [id], onDelete: Cascade)
  posts    Post[]   @relation("PostTags")

  @@map("tag")
}

model Profile {
  id        String  @id @default(cuid())
  firstName String
  bio       String?
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}
