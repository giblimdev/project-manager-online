// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================
// ÉNUMÉRATIONS
// =====================================

enum UserRole {
  ADMIN
  PRODUCT_OWNER
  SCRUM_MASTER
  DEVELOPER
  STAKEHOLDER
  VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  CODE_REVIEW
  TESTING
  DONE
  BLOCKED
  CANCELLED
}

enum SprintStatus {
  PLANNED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum Priority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum ItemStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum Visibility {
  PRIVATE
  PUBLIC
  INTERNAL
}

enum EventType {
  TASK_CREATED
  TASK_UPDATED
  TASK_ASSIGNED
  SPRINT_STARTED
  SPRINT_COMPLETED
  COMMENT_ADDED
  FILE_UPLOADED
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  SPRINT_STARTED
  MENTION
  COMMENT_REPLY
  DEADLINE_REMINDER
  FILE_SHARED
}

enum FileType {
  DOCUMENT //PDF, DOC, DOCX, TXT, RTF, ODT
  IMAGE // JPG, JPEG, PNG, GIF, SVG, WEBP, BMP
  VIDEO // MP4, AVI, MOV, WMV, MKV, WEBM
  ARCHIVE //ZIP, RAR, 7Z, TAR, GZ
  CODE //JS, TS, PY, JAVA, PHP, SQL, JSON, XML, YML
  SPECIFICATION //MD, YAML, JSON (pour API specs), OpenAPI, Swagger
  DESIGN //PSD, SKETCH, FIGMA, AI, XD, INDD
  TEST //Test scripts (.js, .py), rapports de test (.html, .xml), données de test (.csv, .json)
  OTHER //Tout format non catégorisé dans les types précédents
}

// =====================================
// AUTHENTIFICATION (Better Auth)
// =====================================

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    Boolean   @default(false)
  image            String?
  username         String?   @unique
  firstName        String?
  lastName         String?
  bio              String?
  timezone         String?   @default("UTC")
  preferences      Json?     @default("{}")
  isActive         Boolean   @default(true)
  lastLoginAt      DateTime?
  twoFactorEnabled Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations Better Auth
  accounts Account[]
  sessions Session[]

  // Relations métier
  organizationMemberships TeamMember[]
  projectMemberships      ProjectMember[]
  assignedTasks           Task[]          @relation("TaskAssignees")
  createdTasks            Task[]          @relation("TaskCreator")
  assignedUserStories     UserStory[]     @relation("UserStoryAssignees")
  createdUserStories      UserStory[]     @relation("UserStoryCreator")
  comments                Comment[]
  notifications           Notification[]
  auditLogs               AuditLog[]
  timeEntries             TimeEntry[]
  fileUploads             File[]
  FileVersion             FileVersion[]
  ChannelMember           ChannelMember[]
  Message                 Message[]

  // ✅ Relations Item mises à jour
  ownedItems    Item[] @relation("ItemOwner")
  assignedItems Item[] @relation("ItemAssignees")

  @@map("users")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@unique([identifier, value])
  @@map("verification")
}

// =====================================
// ORGANISATIONS ET ÉQUIPES
// =====================================

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  logoUrl     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Hiérarchie d'équipe
  parentTeam   Team?   @relation("TeamHierarchy", fields: [parentTeamId], references: [id])
  parentTeamId String?
  children     Team[]  @relation("TeamHierarchy")

  // Relations
  members   TeamMember[]
  projects  Project[]
  templates Template[]
  // ✅ Suppression de la relation items (maintenant liée à User)

  @@map("teams")
}

model TeamMember {
  id       String   @id @default(cuid())
  role     UserRole @default(DEVELOPER)
  joinedAt DateTime @default(now())
  isActive Boolean  @default(true)

  // Relations
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([teamId, userId])
  @@map("team_members")
}

// =====================================
// PROJETS
// =====================================

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  slug        String
  key         String // Clé courte du projet (ex: "SHOP", "ECOM")
  order       Int       @default(1000)
  startDate   DateTime?
  endDate     DateTime?
  status      String    @default("ACTIVE") // ACTIVE, COMPLETED, CANCELLED, ON_HOLD
  visibility  String    @default("PRIVATE") // PRIVATE, PUBLIC, INTERNAL
  settings    Json?     @default("{}")
  metadata    Json?     @default("{}")
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  members     ProjectMember[]
  initiatives Initiative[]
  sprints     Sprint[]
  files       File[]
  channels    Channel[]
  templates   Template[]

  @@unique([teamId, slug])
  @@unique([teamId, key])
  @@map("projects")
}

model ProjectMember {
  id       String   @id @default(cuid())
  role     UserRole @default(DEVELOPER)
  joinedAt DateTime @default(now())
  isActive Boolean  @default(true)

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([projectId, userId])
  @@map("project_members")
}

// =====================================
// HIÉRARCHIE DU TRAVAIL
// =====================================

model Initiative {
  id          String    @id @default(cuid())
  name        String
  description String?
  objective   String?
  priority    Priority  @default(MEDIUM)
  status      String    @default("ACTIVE")
  startDate   DateTime?
  endDate     DateTime?
  progress    Float     @default(0)
  budget      Float?
  roi         Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  epics Epic[]

  @@map("initiatives")
}

model Epic {
  id          String    @id @default(cuid())
  name        String
  description String?
  priority    Priority  @default(MEDIUM)
  status      String    @default("ACTIVE")
  startDate   DateTime?
  endDate     DateTime?
  progress    Float     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  initiative   Initiative @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
  initiativeId String

  features Feature[]

  @@map("epics")
}

model Feature {
  id                 String    @id @default(cuid())
  name               String
  description        String?
  acceptanceCriteria String?
  priority           Priority  @default(MEDIUM)
  status             String    @default("ACTIVE")
  storyPoints        Int?
  businessValue      Int?
  technicalRisk      Int?
  effort             Int?
  startDate          DateTime?
  endDate            DateTime?
  progress           Float     @default(0)
  position           Int       @default(0)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  epic   Epic   @relation(fields: [epicId], references: [id], onDelete: Cascade)
  epicId String

  parent   Feature?  @relation("FeatureHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  parentId String?
  children Feature[] @relation("FeatureHierarchy")

  userStories  UserStory[]
  dependencies FeatureDependency[] @relation("DependentFeature")
  dependents   FeatureDependency[] @relation("DependsOnFeature")
  files        File[]

  @@map("features")
}

model FeatureDependency {
  id          String   @id @default(cuid())
  type        String   @default("DEPENDS_ON")
  description String?
  createdAt   DateTime @default(now())

  // Relations
  dependentFeature   Feature @relation("DependentFeature", fields: [dependentFeatureId], references: [id], onDelete: Cascade)
  dependentFeatureId String
  dependsOnFeature   Feature @relation("DependsOnFeature", fields: [dependsOnFeatureId], references: [id], onDelete: Cascade)
  dependsOnFeatureId String

  @@unique([dependentFeatureId, dependsOnFeatureId])
  @@map("feature_dependencies")
}

model UserStory {
  id                 String     @id @default(cuid())
  title              String
  description        String?
  acceptanceCriteria String?
  priority           Priority   @default(MEDIUM)
  status             TaskStatus @default(TODO)
  storyPoints        Int?
  businessValue      Int?
  technicalRisk      Int?
  effort             Int?
  position           Int        @default(0)
  labels             String[]   @default([])
  tags               String[]   @default([])
  estimatedHours     Float?
  actualHours        Float?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // Relations
  feature   Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)
  featureId String

  creator   User   @relation("UserStoryCreator", fields: [creatorId], references: [id])
  creatorId String
  assignees User[] @relation("UserStoryAssignees")

  tasks        Task[]
  sprints      Sprint[]              @relation("SprintUserStories")
  dependencies UserStoryDependency[] @relation("DependentUserStory")
  dependents   UserStoryDependency[] @relation("DependsOnUserStory")
  comments     Comment[]
  timeEntries  TimeEntry[]
  files        File[]

  @@map("user_stories")
}

model UserStoryDependency {
  id          String   @id @default(cuid())
  type        String   @default("DEPENDS_ON")
  description String?
  createdAt   DateTime @default(now())

  // Relations
  dependentUserStory   UserStory @relation("DependentUserStory", fields: [dependentUserStoryId], references: [id], onDelete: Cascade)
  dependentUserStoryId String
  dependsOnUserStory   UserStory @relation("DependsOnUserStory", fields: [dependsOnUserStoryId], references: [id], onDelete: Cascade)
  dependsOnUserStoryId String

  @@unique([dependentUserStoryId, dependsOnUserStoryId])
  @@map("user_story_dependencies")
}

model Task {
  id             String     @id @default(cuid())
  title          String
  description    String?
  priority       Priority   @default(MEDIUM)
  status         TaskStatus @default(TODO)
  type           String     @default("TASK")
  position       Int        @default(0)
  labels         String[]   @default([])
  tags           String[]   @default([])
  estimatedHours Float?
  actualHours    Float?
  dueDate        DateTime?
  startDate      DateTime?
  completedAt    DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  userStory   UserStory @relation(fields: [userStoryId], references: [id], onDelete: Cascade)
  userStoryId String

  creator   User   @relation("TaskCreator", fields: [creatorId], references: [id])
  creatorId String
  assignees User[] @relation("TaskAssignees")

  dependencies TaskDependency[] @relation("DependentTask")
  dependents   TaskDependency[] @relation("DependsOnTask")
  comments     Comment[]
  timeEntries  TimeEntry[]
  files        File[]

  @@map("tasks")
}

model TaskDependency {
  id          String   @id @default(cuid())
  type        String   @default("DEPENDS_ON")
  description String?
  createdAt   DateTime @default(now())

  // Relations
  dependentTask   Task   @relation("DependentTask", fields: [dependentTaskId], references: [id], onDelete: Cascade)
  dependentTaskId String
  dependsOnTask   Task   @relation("DependsOnTask", fields: [dependsOnTaskId], references: [id], onDelete: Cascade)
  dependsOnTaskId String

  @@unique([dependentTaskId, dependsOnTaskId])
  @@map("task_dependencies")
}

model Sprint {
  id            String       @id @default(cuid())
  name          String
  goal          String?
  description   String?
  startDate     DateTime
  endDate       DateTime
  status        SprintStatus @default(PLANNED)
  capacity      Int?
  velocity      Float?
  burndownData  Json?        @default("{}")
  retrospective Json?        @default("{}")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  userStories UserStory[] @relation("SprintUserStories")
  timeEntries TimeEntry[]
  files       File[]
  items       Item[]

  @@map("sprints")
}

model File {
  id           String   @id @default(cuid())
  name         String
  originalName String?
  type         FileType
  mimeType     String
  size         Int
  url          String
  path         String?
  description  String?
  import       Json?
  export       Json?
  script       String?
  version      Int      @default(1)
  isPublic     Boolean  @default(false)
  isFolder     Boolean  @default(false)
  metadata     Json?    @default("{}")
  tags         String[] @default([])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  uploader    User       @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  uploaderId  String
  parent      File?      @relation("FileHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  parentId    String?
  children    File[]     @relation("FileHierarchy")
  project     Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String?
  feature     Feature?   @relation(fields: [featureId], references: [id], onDelete: Cascade)
  featureId   String?
  userStory   UserStory? @relation(fields: [userStoryId], references: [id], onDelete: Cascade)
  userStoryId String?
  task        Task?      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      String?
  sprint      Sprint?    @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  sprintId    String?

  versions FileVersion[]
  comments Comment[]
  items    Item[]

  @@map("files")
}

model FileVersion {
  id        String   @id @default(cuid())
  version   Int
  url       String
  size      Int
  checksum  String?
  changelog String?
  createdAt DateTime @default(now())

  // Relations
  file     File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId   String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  @@unique([fileId, version])
  @@map("file_versions")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  mentions  String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  task        Task?      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      String?
  userStory   UserStory? @relation(fields: [userStoryId], references: [id], onDelete: Cascade)
  userStoryId String?
  file        File?      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId      String?
  item        Item?      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId      String?

  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  parentCommentId String?
  replies         Comment[] @relation("CommentReplies")

  @@map("comments")
}

model Channel {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   @default("TEXT")
  isPrivate   Boolean  @default(false)
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  messages Message[]
  members  ChannelMember[]

  @@map("channels")
}

model ChannelMember {
  id       String   @id @default(cuid())
  role     String   @default("MEMBER")
  joinedAt DateTime @default(now())

  // Relations
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([channelId, userId])
  @@map("channel_members")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  type      String   @default("TEXT")
  metadata  Json?    @default("{}")
  mentions  String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String

  @@map("messages")
}

model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String
  category    String?
  content     Json
  isPublic    Boolean  @default(false)
  isSystem    Boolean  @default(false)
  version     String   @default("1.0.0")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?

  @@map("templates")
}

model TimeEntry {
  id          String    @id @default(cuid())
  description String?
  hours       Float
  date        DateTime
  startTime   DateTime?
  endTime     DateTime?
  isManual    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  task        Task?      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      String?
  userStory   UserStory? @relation(fields: [userStoryId], references: [id], onDelete: Cascade)
  userStoryId String?
  sprint      Sprint?    @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  sprintId    String?
  item        Item?      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId      String?

  @@map("time_entries")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  data      Json?            @default("{}")
  read      Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("notifications")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  entity    String
  entityId  String
  oldValues Json?
  newValues Json?
  metadata  Json?    @default("{}")
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("audit_logs")
}

// =====================================
// MODÈLE ITEM UNIFIÉ 
// =====================================

model Item {
  id                 String     @id @default(cuid())
  type               String
  name               String
  description        String?
  objective          String?
  slug               String
  key                String?
  priority           Priority?  @default(MEDIUM)
  acceptanceCriteria String?
  storyPoints        Int?
  businessValue      Int?
  technicalRisk      Int?
  effort             Int?
  progress           Int?
  status             ItemStatus @default(ACTIVE)
  visibility         Visibility @default(PRIVATE)
  startDate          DateTime?
  endDate            DateTime?
  completedAt        DateTime?
  settings           Json?      @default("{}")
  metadata           Json?      @default("{}")
  text               Json?      @default("{}")
  backlogPosition    Int?
  DoD                String?
  isActive           Boolean    @default(true)
  estimatedHours     Int?
  actualHours        Int?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // ✅ NOUVELLE RELATION AVEC USER (propriétaire)
  user   User   @relation("ItemOwner", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // Hiérarchie
  parent   Item?   @relation("ItemHierarchy", fields: [parentId], references: [id])
  parentId String?
  children Item[]  @relation("ItemHierarchy")

  // Assignation (plusieurs utilisateurs peuvent être assignés)
  assignees User[] @relation("ItemAssignees")

  // Travail
  sprint      Sprint?     @relation(fields: [sprintId], references: [id])
  sprintId    String?
  timeEntries TimeEntry[]

  // Collaboration
  comments Comment[]
  files    File[]

  @@map("items")
}

model Glossary {
  id          String   @id @default(cuid())
  term        String
  order       Int      @default(1000)
  description String?
  type        String   @default("TERM")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("glossary")
}
