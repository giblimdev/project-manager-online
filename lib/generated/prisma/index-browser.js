
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  username: 'username',
  firstName: 'firstName',
  lastName: 'lastName',
  bio: 'bio',
  timezone: 'timezone',
  preferences: 'preferences',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  twoFactorEnabled: 'twoFactorEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  slug: 'slug',
  logoUrl: 'logoUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  parentTeamId: 'parentTeamId'
};

exports.Prisma.TeamMemberScalarFieldEnum = {
  id: 'id',
  role: 'role',
  joinedAt: 'joinedAt',
  isActive: 'isActive',
  teamId: 'teamId',
  userId: 'userId'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  slug: 'slug',
  key: 'key',
  order: 'order',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  visibility: 'visibility',
  settings: 'settings',
  metadata: 'metadata',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectMemberScalarFieldEnum = {
  id: 'id',
  role: 'role',
  joinedAt: 'joinedAt',
  isActive: 'isActive',
  projectId: 'projectId',
  userId: 'userId'
};

exports.Prisma.InitiativeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  objective: 'objective',
  priority: 'priority',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  progress: 'progress',
  budget: 'budget',
  roi: 'roi',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  projectId: 'projectId'
};

exports.Prisma.EpicScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  priority: 'priority',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  progress: 'progress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  initiativeId: 'initiativeId'
};

exports.Prisma.FeatureScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  acceptanceCriteria: 'acceptanceCriteria',
  priority: 'priority',
  status: 'status',
  storyPoints: 'storyPoints',
  businessValue: 'businessValue',
  technicalRisk: 'technicalRisk',
  effort: 'effort',
  startDate: 'startDate',
  endDate: 'endDate',
  progress: 'progress',
  position: 'position',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  epicId: 'epicId',
  parentId: 'parentId',
  projectId: 'projectId'
};

exports.Prisma.FeatureDependencyScalarFieldEnum = {
  id: 'id',
  type: 'type',
  description: 'description',
  createdAt: 'createdAt',
  dependentFeatureId: 'dependentFeatureId',
  dependsOnFeatureId: 'dependsOnFeatureId'
};

exports.Prisma.UserStoryScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  acceptanceCriteria: 'acceptanceCriteria',
  priority: 'priority',
  status: 'status',
  storyPoints: 'storyPoints',
  businessValue: 'businessValue',
  technicalRisk: 'technicalRisk',
  effort: 'effort',
  position: 'position',
  labels: 'labels',
  tags: 'tags',
  estimatedHours: 'estimatedHours',
  actualHours: 'actualHours',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  featureId: 'featureId',
  creatorId: 'creatorId'
};

exports.Prisma.UserStoryDependencyScalarFieldEnum = {
  id: 'id',
  type: 'type',
  description: 'description',
  createdAt: 'createdAt',
  dependentUserStoryId: 'dependentUserStoryId',
  dependsOnUserStoryId: 'dependsOnUserStoryId'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  priority: 'priority',
  status: 'status',
  type: 'type',
  position: 'position',
  labels: 'labels',
  tags: 'tags',
  estimatedHours: 'estimatedHours',
  actualHours: 'actualHours',
  dueDate: 'dueDate',
  startDate: 'startDate',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userStoryId: 'userStoryId',
  creatorId: 'creatorId'
};

exports.Prisma.TaskDependencyScalarFieldEnum = {
  id: 'id',
  type: 'type',
  description: 'description',
  createdAt: 'createdAt',
  dependentTaskId: 'dependentTaskId',
  dependsOnTaskId: 'dependsOnTaskId'
};

exports.Prisma.SprintScalarFieldEnum = {
  id: 'id',
  name: 'name',
  goal: 'goal',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  capacity: 'capacity',
  velocity: 'velocity',
  burndownData: 'burndownData',
  retrospective: 'retrospective',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  projectId: 'projectId'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  name: 'name',
  originalName: 'originalName',
  type: 'type',
  mimeType: 'mimeType',
  size: 'size',
  url: 'url',
  path: 'path',
  description: 'description',
  import: 'import',
  export: 'export',
  script: 'script',
  version: 'version',
  isPublic: 'isPublic',
  isFolder: 'isFolder',
  metadata: 'metadata',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  uploaderId: 'uploaderId',
  parentId: 'parentId',
  projectId: 'projectId',
  featureId: 'featureId',
  userStoryId: 'userStoryId',
  taskId: 'taskId',
  sprintId: 'sprintId'
};

exports.Prisma.FileVersionScalarFieldEnum = {
  id: 'id',
  version: 'version',
  url: 'url',
  size: 'size',
  checksum: 'checksum',
  changelog: 'changelog',
  createdAt: 'createdAt',
  fileId: 'fileId',
  authorId: 'authorId'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  mentions: 'mentions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  authorId: 'authorId',
  taskId: 'taskId',
  userStoryId: 'userStoryId',
  fileId: 'fileId',
  itemId: 'itemId',
  parentCommentId: 'parentCommentId'
};

exports.Prisma.ChannelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  isPrivate: 'isPrivate',
  isArchived: 'isArchived',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  projectId: 'projectId'
};

exports.Prisma.ChannelMemberScalarFieldEnum = {
  id: 'id',
  role: 'role',
  joinedAt: 'joinedAt',
  channelId: 'channelId',
  userId: 'userId'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  type: 'type',
  metadata: 'metadata',
  mentions: 'mentions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  channelId: 'channelId',
  authorId: 'authorId'
};

exports.Prisma.TemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  category: 'category',
  content: 'content',
  isPublic: 'isPublic',
  isSystem: 'isSystem',
  version: 'version',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  teamId: 'teamId',
  projectId: 'projectId'
};

exports.Prisma.TimeEntryScalarFieldEnum = {
  id: 'id',
  description: 'description',
  hours: 'hours',
  date: 'date',
  startTime: 'startTime',
  endTime: 'endTime',
  isManual: 'isManual',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  taskId: 'taskId',
  userStoryId: 'userStoryId',
  sprintId: 'sprintId',
  itemId: 'itemId'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  message: 'message',
  data: 'data',
  read: 'read',
  readAt: 'readAt',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  entity: 'entity',
  entityId: 'entityId',
  oldValues: 'oldValues',
  newValues: 'newValues',
  metadata: 'metadata',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.ItemScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  description: 'description',
  objective: 'objective',
  slug: 'slug',
  key: 'key',
  priority: 'priority',
  acceptanceCriteria: 'acceptanceCriteria',
  storyPoints: 'storyPoints',
  businessValue: 'businessValue',
  technicalRisk: 'technicalRisk',
  effort: 'effort',
  progress: 'progress',
  status: 'status',
  visibility: 'visibility',
  startDate: 'startDate',
  endDate: 'endDate',
  completedAt: 'completedAt',
  settings: 'settings',
  metadata: 'metadata',
  text: 'text',
  backlogPosition: 'backlogPosition',
  DoD: 'DoD',
  isActive: 'isActive',
  estimatedHours: 'estimatedHours',
  actualHours: 'actualHours',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  parentId: 'parentId',
  sprintId: 'sprintId'
};

exports.Prisma.GlossaryScalarFieldEnum = {
  id: 'id',
  term: 'term',
  order: 'order',
  description: 'description',
  type: 'type',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  PRODUCT_OWNER: 'PRODUCT_OWNER',
  SCRUM_MASTER: 'SCRUM_MASTER',
  DEVELOPER: 'DEVELOPER',
  STAKEHOLDER: 'STAKEHOLDER',
  VIEWER: 'VIEWER'
};

exports.Priority = exports.$Enums.Priority = {
  CRITICAL: 'CRITICAL',
  HIGH: 'HIGH',
  MEDIUM: 'MEDIUM',
  LOW: 'LOW'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  TODO: 'TODO',
  IN_PROGRESS: 'IN_PROGRESS',
  CODE_REVIEW: 'CODE_REVIEW',
  TESTING: 'TESTING',
  DONE: 'DONE',
  BLOCKED: 'BLOCKED',
  CANCELLED: 'CANCELLED'
};

exports.SprintStatus = exports.$Enums.SprintStatus = {
  PLANNED: 'PLANNED',
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.FileType = exports.$Enums.FileType = {
  DOCUMENT: 'DOCUMENT',
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  ARCHIVE: 'ARCHIVE',
  CODE: 'CODE',
  SPECIFICATION: 'SPECIFICATION',
  DESIGN: 'DESIGN',
  TEST: 'TEST',
  OTHER: 'OTHER'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  TASK_ASSIGNED: 'TASK_ASSIGNED',
  TASK_COMPLETED: 'TASK_COMPLETED',
  SPRINT_STARTED: 'SPRINT_STARTED',
  MENTION: 'MENTION',
  COMMENT_REPLY: 'COMMENT_REPLY',
  DEADLINE_REMINDER: 'DEADLINE_REMINDER',
  FILE_SHARED: 'FILE_SHARED'
};

exports.ItemStatus = exports.$Enums.ItemStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  ON_HOLD: 'ON_HOLD'
};

exports.Visibility = exports.$Enums.Visibility = {
  PRIVATE: 'PRIVATE',
  PUBLIC: 'PUBLIC',
  INTERNAL: 'INTERNAL'
};

exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  Session: 'Session',
  Verification: 'Verification',
  Team: 'Team',
  TeamMember: 'TeamMember',
  Project: 'Project',
  ProjectMember: 'ProjectMember',
  Initiative: 'Initiative',
  Epic: 'Epic',
  Feature: 'Feature',
  FeatureDependency: 'FeatureDependency',
  UserStory: 'UserStory',
  UserStoryDependency: 'UserStoryDependency',
  Task: 'Task',
  TaskDependency: 'TaskDependency',
  Sprint: 'Sprint',
  File: 'File',
  FileVersion: 'FileVersion',
  Comment: 'Comment',
  Channel: 'Channel',
  ChannelMember: 'ChannelMember',
  Message: 'Message',
  Template: 'Template',
  TimeEntry: 'TimeEntry',
  Notification: 'Notification',
  AuditLog: 'AuditLog',
  Item: 'Item',
  Glossary: 'Glossary'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
